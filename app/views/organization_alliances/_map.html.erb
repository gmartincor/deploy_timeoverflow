<div class="row">
    <div class="col-12 col-sm-12 col-md-12 col-lg-12">
        <ul class="nav nav-pills actions-menu mb-3">
            <li class="nav-item">
                <%= link_to organization_alliances_path(status: 'pending', view: 'map'), class: "nav-link #{'active' if @status == 'pending'}" do %>
                    <%= glyph :time %>
                    <%= t('organization_alliances.status.pending') %>
                <% end %>
            </li>
            <li class="nav-item">
                <%= link_to organization_alliances_path(status: 'accepted', view: 'map'), class: "nav-link #{'active' if @status == 'accepted'}" do %>
                    <%= glyph :ok %>
                    <%= t('organization_alliances.status.accepted') %>
                <% end %>
            </li>
            <li class="nav-item">
                <%= link_to organization_alliances_path(status: 'rejected', view: 'map'), class: "nav-link #{'active' if @status == 'rejected'}" do %>
                    <%= glyph :remove %>
                    <%= t('organization_alliances.status.rejected') %>
                <% end %>
            </li>
            <li class="nav-item ms-auto">
                <%= link_to organizations_path, class: "text-primary" do %>
                    <%= glyph :search %>
                    <%= t('organization_alliances.search_organizations') %>
                <% end %>
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex align-items-center">
                        <div class="me-4">
                            <span class="glyphicon glyphicon-home" style="color: #0d6efd; font-size: 18px;"></span> <%= t('organization_alliances.map.current_organization') %>
                        </div>
                        <div class="me-4">
                            <span class="glyphicon glyphicon-home" style="color: #198754; font-size: 18px;"></span> <%= t('organization_alliances.map.allied_organization') %>
                        </div>
                        <div class="me-4">
                            <span class="glyphicon glyphicon-home" style="color: #6c757d; font-size: 18px;"></span> <%= t('organization_alliances.map.other_organization') %>
                        </div>
                    </div>
                    <div class="d-flex align-items-center mt-2">
                        <div class="me-4">
                            <span style="display:inline-block; width:50px; height:3px; background-color:green;"></span> <%= t('organization_alliances.map.accepted_alliance') %>
                        </div>
                        <div class="me-4">
                            <span style="display:inline-block; width:50px; height:3px; background-color:orange;"></span> <%= t('organization_alliances.map.pending_alliance') %>
                        </div>
                        <div class="me-4">
                            <span style="display:inline-block; width:50px; height:3px; background-color:red;"></span> <%= t('organization_alliances.map.rejected_alliance') %>
                        </div>
                    </div>
                </div>
                
                <div id="alliance-map" style="height: 500px; width: 100%; border: 1px solid #ccc;">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="card radius-filter-card mt-3">
                    <div class="card-body">
                        <h5 class="card-title"><%= t('maps.filter.title_km') %></h5>
                        <div class="row align-items-center">
                            <div class="col-md-10">
                                <div class="d-flex">
                                    <span class="me-2">1</span>
                                    <input type="range" class="form-range flex-grow-1" id="distance-slider" min="1" max="500" value="500">
                                    <span class="ms-2"><span id="slider-value">Sin l√≠mite</span></span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-secondary" id="reset-radius">
                                    <%= t('maps.filter.reset') %>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder@2.4.0/dist/Control.Geocoder.css" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>
<script src="https://unpkg.com/leaflet-control-geocoder@2.4.0/dist/Control.Geocoder.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const organizations = <%= raw organization_map_data.to_json %>;
        const alliances = <%= raw alliance_map_data.to_json %>;
        const currentOrgId = <%= current_organization.id %>;
        const selectedStatus = '<%= @status %>';
        
        const mapElement = document.getElementById('alliance-map');
        mapElement.innerHTML = '';
        
        let map = L.map('alliance-map').setView([40.416775, -3.703790], 6);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        }).addTo(map);
        
        const orgsWithCoordinates = organizations.filter(org => 
            org.latitude && org.longitude && 
            !isNaN(parseFloat(org.latitude)) && 
            !isNaN(parseFloat(org.longitude))
        );
        
        if (orgsWithCoordinates.length === 0) {
            mapElement.innerHTML = 
                '<div class="alert alert-warning"><%= t("organization_alliances.map.no_coordinates") %></div>';
            return;
        }
        
        let markers = {};
        let polylines = [];
        const bounds = L.latLngBounds();
        let radiusCircle = null;
        let originalOrgsData = [...orgsWithCoordinates];
        
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = 
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }
        
        function hasPendingAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'pending' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }

        function hasAcceptedAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'accepted' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }

        function hasRejectedAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'rejected' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }
        
        function createCustomIcon(color, size) {
            const iconHtml = `<div class="map-icon" style="font-size: ${size}px; color: ${color};"><span class="glyphicon glyphicon-home"></span></div>`;
            
            return L.divIcon({
                html: iconHtml,
                className: 'custom-map-icon',
                iconSize: [size, size],
                iconAnchor: [size/2, size/2]
            });
        }
        
        function createCenterMarker() {
            return L.divIcon({
                html: '<div class="center-marker"></div>',
                className: 'center-marker-container',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            });
        }
        
        function drawMarkersAndLines() {
            for (let id in markers) {
                map.removeLayer(markers[id]);
            }
            
            polylines.forEach(line => map.removeLayer(line));
            polylines = [];
            
            if (radiusCircle) {
                map.removeLayer(radiusCircle);
                radiusCircle = null;
            }
            
            markers = {};
            const newBounds = L.latLngBounds();
            
            orgsWithCoordinates.forEach(function(org) {
                const isAllied = hasAcceptedAlliance(org.id);
                const isPending = hasPendingAlliance(org.id);
                const isRejected = hasRejectedAlliance(org.id);
                
                let iconColor;
                let iconSize;
                
                if (org.id === currentOrgId) {
                    iconColor = '#0d6efd'; 
                    iconSize = 30;
                } else if (isAllied) {
                    iconColor = '#198754'; 
                    iconSize = 28;
                } else {
                    iconColor = '#6c757d'; 
                    iconSize = 26;
                }
                
                const customIcon = createCustomIcon(iconColor, iconSize);
                
                const marker = L.marker([parseFloat(org.latitude), parseFloat(org.longitude)], {
                    icon: customIcon
                }).addTo(map);
                
                let popupContent = '<strong>' + org.name + '</strong><br>' + 
                    (org.city ? org.city + '<br>' : '') + 
                    (org.address ? org.address + '<br>' : '');
                
                if (org.distance) {
                    popupContent += `<span class="distance-badge">${org.distance.toFixed(1)} <%= t('maps.km') %></span><br>`;
                }
                
                popupContent += '<br><a href="/organizations/' + org.id + '" class="btn btn-sm btn-primary">' + 
                    '<%= t("global.show") %></a>';
                    
                if (org.id !== currentOrgId && !isPending && !isAllied && !isRejected) {
                    popupContent += ' <form action="/organization_alliances" method="post" style="display:inline;">' +
                        '<input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">' +
                        '<input type="hidden" name="organization_alliance[target_organization_id]" value="' + org.id + '">' +
                        '<button type="submit" class="btn btn-sm btn-secondary">' +
                        '<%= t("organization_alliances.request_alliance") %></button></form>';
                } 
                
                marker.bindPopup(popupContent);
                
                markers[org.id] = marker;
                newBounds.extend(marker.getLatLng());
            });
            
            alliances.forEach(function(alliance) {
                if (selectedStatus !== alliance.status && selectedStatus !== 'all') return;
                
                const sourceMarker = markers[alliance.source_id];
                const targetMarker = markers[alliance.target_id];
                
                if (sourceMarker && targetMarker) {
                    const sourceLatLng = sourceMarker.getLatLng();
                    const targetLatLng = targetMarker.getLatLng();
                    
                    let lineStyle;
                    switch(alliance.status) {
                        case 'accepted':
                            lineStyle = {
                                color: 'green',
                                weight: 3,
                                opacity: 0.7
                            };
                            break;
                        case 'pending':
                            lineStyle = {
                                color: 'orange',
                                weight: 2,
                                opacity: 0.7
                            };
                            break;
                        case 'rejected':
                            lineStyle = {
                                color: 'red',
                                weight: 2,
                                opacity: 0.5
                            };
                            break;
                    }
                    
                    const polyline = L.polyline([sourceLatLng, targetLatLng], lineStyle).addTo(map);
                    
                    polyline.bindTooltip('<%= t("organization_alliances.map.alliance_status") %>: ' + 
                                                         '<%= t("organization_alliances.status") %>.' + alliance.status);
                    
                    polylines.push(polyline);
                }
            });
            
            if (newBounds.isValid()) {
                map.fitBounds(newBounds.pad(0.1));
            }
        }
        
        drawMarkersAndLines();
        
        function filterByRadius(centerLat, centerLng, radius) {
            orgsWithCoordinates.length = 0;
            originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
            
            const filteredOrgs = orgsWithCoordinates.filter(org => {
                if (!org.latitude || !org.longitude) return false;
                
                const dist = calculateDistance(
                    centerLat, 
                    centerLng, 
                    parseFloat(org.latitude), 
                    parseFloat(org.longitude)
                );
                
                org.distance = dist;
                
                return dist <= radius;
            });
            
            if (filteredOrgs.length === 0) {
                alert('<%= t("maps.no_organizations_in_radius") %>');
                return false;
            }
            
            if (radiusCircle) {
                map.removeLayer(radiusCircle);
            }
            
            radiusCircle = L.circle([centerLat, centerLng], {
                radius: radius * 1000,
                color: '#3388ff',
                weight: 2,
                opacity: 0.6,
                fillColor: '#3388ff',
                fillOpacity: 0.1,
                className: 'radius-circle'
            }).addTo(map);
            
            orgsWithCoordinates.length = 0;
            filteredOrgs.forEach(org => orgsWithCoordinates.push(org));
            
            drawMarkersAndLines();
            
            const centerIcon = createCenterMarker();
            const centerMarker = L.marker([centerLat, centerLng], {
                icon: centerIcon
            }).addTo(map);
            
            centerMarker.bindTooltip('<%= t("maps.filter.center_point") %>');
            
            return true;
        }
        
        document.getElementById('distance-slider').addEventListener('input', function() {
            const sliderValue = document.getElementById('slider-value');
            const value = parseInt(this.value);
            
            if (value === 500) {
                sliderValue.textContent = 'Sin l√≠mite';
                
                if (radiusCircle) {
                    map.removeLayer(radiusCircle);
                    radiusCircle = null;
                }
                
                orgsWithCoordinates.length = 0;
                originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
                
                drawMarkersAndLines();
                
                if (bounds.isValid()) {
                    map.fitBounds(bounds.pad(0.1));
                }
            } else {
                sliderValue.textContent = value + ' km';
                applyRadiusFilter(value);
            }
        });

        document.getElementById('reset-radius').addEventListener('click', function() {
            const slider = document.getElementById('distance-slider');
            slider.value = 500;
            document.getElementById('slider-value').textContent = 'Sin l√≠mite';
            
            if (radiusCircle) {
                map.removeLayer(radiusCircle);
                radiusCircle = null;
            }
            
            orgsWithCoordinates.length = 0;
            originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
            
            drawMarkersAndLines();
            
            if (bounds.isValid()) {
                map.fitBounds(bounds.pad(0.1));
            }
        });
        
        function applyRadiusFilter(radius) {
            if (radius <= 0 || isNaN(radius)) {
                return;
            }
            
            const currentOrg = organizations.find(org => org.id === currentOrgId);
            
            if (!currentOrg || !currentOrg.latitude || !currentOrg.longitude) {
                return;
            }
            
            filterByRadius(
                parseFloat(currentOrg.latitude),
                parseFloat(currentOrg.longitude),
                radius
            );
        }
        
        const searchContainer = document.createElement('div');
        searchContainer.className = 'card mt-3';
        searchContainer.innerHTML = `
            <div class="card-body">
                <h5 class="card-title"><%= t("organization_alliances.map.find_organization") %></h5>
                <div class="row g-3 align-items-end">
                    <div class="col-md-10">
                        <label for="organization-selector" class="form-label"><%= t("organization_alliances.map.select_organization") %></label>
                        <div class="input-group mb-0">
                            <select class="form-select" id="organization-selector">
                                <option value=""><%= t('organization_alliances.map.select_organization') %></option>
                                ${orgsWithCoordinates.map(org => `
                                    <option value="${org.id}">${org.name}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-secondary" id="locate-organization-btn">
                            <%= t("organization_alliances.map.locate") %>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.querySelector('.card-body').appendChild(searchContainer);
        
        document.getElementById('locate-organization-btn').addEventListener('click', function() {
            const selectedId = parseInt(document.getElementById('organization-selector').value);
            if (selectedId && markers[selectedId]) {
                const marker = markers[selectedId];
                map.setView(marker.getLatLng(), 13);
                marker.openPopup();
            }
        });
        
        setTimeout(function() {
            map.invalidateSize();
        }, 100);
    });
</script>
