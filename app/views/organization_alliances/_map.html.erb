<div class="row">
    <div class="col-12">
        <nav aria-label="<%= t('organization_alliances.navigation_label') %>">
            <ul class="nav nav-pills actions-menu mb-3">
                <li class="nav-item">
                    <%= link_to organization_alliances_path(status: 'pending', view: 'map'), class: "nav-link #{'active' if @status == 'pending'}", aria: { current: @status == 'pending' ? 'page' : nil } do %>
                        <%= glyph :time %>
                        <%= t('organization_alliances.status.pending') %>
                    <% end %>
                </li>
                <li class="nav-item">
                    <%= link_to organization_alliances_path(status: 'accepted', view: 'map'), class: "nav-link #{'active' if @status == 'accepted'}", aria: { current: @status == 'accepted' ? 'page' : nil } do %>
                        <%= glyph :ok %>
                        <%= t('organization_alliances.status.accepted') %>
                    <% end %>
                </li>
                <li class="nav-item">
                    <%= link_to organization_alliances_path(status: 'rejected', view: 'map'), class: "nav-link #{'active' if @status == 'rejected'}", aria: { current: @status == 'rejected' ? 'page' : nil } do %>
                        <%= glyph :remove %>
                        <%= t('organization_alliances.status.rejected') %>
                    <% end %>
                </li>
                <li class="nav-item ms-auto">
                    <%= link_to organizations_path, class: "text-primary", aria: { label: t('organization_alliances.search_organizations_aria') } do %>
                        <%= glyph :search %>
                        <%= t('organization_alliances.search_organizations') %>
                    <% end %>
                </li>
            </ul>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="mb-3">
                    <fieldset>
                        <legend class="visually-hidden"><%= t('organization_alliances.map.legend') %></legend>
                        <div class="row mb-2 gx-2 legend-icons">
                            <div class="col-12 col-sm-4 col-md-4 mb-2 mb-sm-0 d-flex align-items-center">
                                <span class="glyphicon glyphicon-home" style="color: #0d6efd; font-size: 18px; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.current_organization') %></span>
                            </div>
                            <div class="col-12 col-sm-4 col-md-4 mb-2 mb-sm-0 d-flex align-items-center">
                                <span class="glyphicon glyphicon-home" style="color: #198754; font-size: 18px; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.allied_organization') %></span>
                            </div>
                            <div class="col-12 col-sm-4 col-md-4 d-flex align-items-center">
                                <span class="glyphicon glyphicon-home" style="color: #6c757d; font-size: 18px; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.other_organization') %></span>
                            </div>
                        </div>
                        
                        <div class="row gx-2 legend-lines">
                            <div class="col-12 col-sm-4 col-md-4 mb-2 mb-sm-0 d-flex align-items-center">
                                <span style="display:inline-block; width:40px; height:3px; background-color:green; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.accepted_alliance') %></span>
                            </div>
                            <div class="col-12 col-sm-4 col-md-4 mb-2 mb-sm-0 d-flex align-items-center">
                                <span style="display:inline-block; width:40px; height:3px; background-color:orange; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.pending_alliance') %></span>
                            </div>
                            <div class="col-12 col-sm-4 col-md-4 d-flex align-items-center">
                                <span style="display:inline-block; width:40px; height:3px; background-color:red; margin-right: 8px;" aria-hidden="true"></span> 
                                <span class="legend-text"><%= t('organization_alliances.map.rejected_alliance') %></span>
                            </div>
                        </div>
                    </fieldset>
                </div>
                
                <div id="alliance-map" style="height: 500px; width: 100%; border: 1px solid #ccc;" tabindex="0" role="application" aria-label="<%= t('organization_alliances.map.map_description') %>">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden"><%= t('global.loading') %></span>
                        </div>
                    </div>
                </div>
                <div class="card radius-filter-card mt-3">
                    <div class="card-body">
                        <h5 class="card-title" id="distance-filter-title"><%= t('maps.filter.title_km') %></h5>
                        <div class="row align-items-center">
                            <div class="col-md-10 col-sm-8 col-8">
                                <div class="d-flex align-items-center">
                                    <span class="me-2" id="min-distance" aria-hidden="true">1</span>
                                    <label for="distance-slider" class="visually-hidden"><%= t('maps.filter.slider_label') %></label>
                                    <input type="range" class="form-range flex-grow-1" id="distance-slider" 
                                        min="1" max="500" value="500" 
                                        aria-describedby="distance-filter-title slider-instructions"
                                        aria-valuemin="1" aria-valuemax="500" aria-valuenow="500"
                                        aria-valuetext="Sin límite">
                                    <span class="ms-2"><span id="slider-value" aria-live="polite">Sin límite</span></span>
                                </div>
                                <div id="slider-instructions" class="visually-hidden"><%= t('maps.filter.slider_instructions') %></div>
                            </div>
                            <div class="col-md-2 col-sm-4 col-4">
                                <button class="btn btn-secondary" id="reset-radius" 
                                    aria-label="<%= t('maps.filter.reset_aria') %>">
                                    <%= t('maps.filter.reset') %>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder@2.4.0/dist/Control.Geocoder.css" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>
<script src="https://unpkg.com/leaflet-control-geocoder@2.4.0/dist/Control.Geocoder.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const organizations = <%= raw organization_map_data.to_json %>;
        const alliances = <%= raw alliance_map_data.to_json %>;
        const currentOrgId = <%= current_organization.id %>;
        const selectedStatus = '<%= @status %>';
        
        const mapElement = document.getElementById('alliance-map');
        mapElement.innerHTML = '';
        
        let map = L.map('alliance-map').setView([40.416775, -3.703790], 6);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        }).addTo(map);
        
        const orgsWithCoordinates = organizations.filter(org => 
            org.latitude && org.longitude && 
            !isNaN(parseFloat(org.latitude)) && 
            !isNaN(parseFloat(org.longitude))
        );
        
        if (orgsWithCoordinates.length === 0) {
            mapElement.innerHTML = 
                '<div class="alert alert-warning" role="alert"><%= t("organization_alliances.map.no_coordinates") %></div>';
            return;
        }
        
        let markers = {};
        let polylines = [];
        const bounds = L.latLngBounds();
        let originalOrgsData = [...orgsWithCoordinates];
        
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const point1 = L.latLng(lat1, lon1);
            const point2 = L.latLng(lat2, lon2);
            return point1.distanceTo(point2) / 1000;
        }
        
        function hasPendingAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'pending' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }

        function hasAcceptedAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'accepted' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }

        function hasRejectedAlliance(orgId) {
            return alliances.some(alliance => 
                alliance.status === 'rejected' && (
                    (alliance.source_id === currentOrgId && alliance.target_id === orgId) ||
                    (alliance.target_id === currentOrgId && alliance.source_id === orgId)
                )
            );
        }
        
        function createCustomIcon(color, size) {
            const iconHtml = `<div class="map-icon" style="font-size: ${size}px; color: ${color};" aria-hidden="true"><span class="glyphicon glyphicon-home"></span></div>`;
            
            return L.divIcon({
                html: iconHtml,
                className: 'custom-map-icon',
                iconSize: [size, size],
                iconAnchor: [size/2, size/2]
            });
        }
        
        function createCenterMarker() {
            return L.divIcon({
                html: '<div class="center-marker"></div>',
                className: 'center-marker-container',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            });
        }
        
        function drawMarkersAndLines() {
            for (let id in markers) {
                map.removeLayer(markers[id]);
            }
            
            polylines.forEach(line => map.removeLayer(line));
            polylines = [];
            
            markers = {};
            const newBounds = L.latLngBounds();
            
            orgsWithCoordinates.forEach(function(org) {
                const isAllied = hasAcceptedAlliance(org.id);
                const isPending = hasPendingAlliance(org.id);
                const isRejected = hasRejectedAlliance(org.id);
                
                let iconColor;
                let iconSize;
                
                if (org.id === currentOrgId) {
                    iconColor = '#0d6efd'; 
                    iconSize = 30;
                } else if (isAllied) {
                    iconColor = '#198754'; 
                    iconSize = 28;
                } else {
                    iconColor = '#6c757d'; 
                    iconSize = 26;
                }
                
                const customIcon = createCustomIcon(iconColor, iconSize);
                
                const marker = L.marker([parseFloat(org.latitude), parseFloat(org.longitude)], {
                    icon: customIcon,
                    alt: org.name,
                    title: org.name 
                }).addTo(map);
                
                let popupContent = '<div role="dialog" aria-label="' + org.name + ' <%= t("maps.filter.org_info") %>">' +
                    '<strong>' + org.name + '</strong><br>' + 
                    (org.city ? org.city + '<br>' : '') + 
                    (org.address ? org.address + '<br>' : '');
                
                if (org.distance) {
                    popupContent += `<span class="distance-badge">${org.distance.toFixed(1)} <%= t('maps.km') %></span><br>`;
                }
                
                popupContent += '<br><a href="/organizations/' + org.id + '" class="btn btn-sm btn-primary">' + 
                    '<%= t("global.show") %></a>';
                    
                if (org.id !== currentOrgId && !isPending && !isAllied && !isRejected) {
                    popupContent += ' <form action="/organization_alliances" method="post" style="display:inline;">' +
                        '<input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">' +
                        '<input type="hidden" name="organization_alliance[target_organization_id]" value="' + org.id + '">' +
                        '<button type="submit" class="btn btn-sm btn-secondary">' +
                        '<%= t("organization_alliances.request_alliance") %></button></form>';
                } 
                
                popupContent += '</div>';
                
                marker.bindPopup(popupContent);
                
                markers[org.id] = marker;
                newBounds.extend(marker.getLatLng());
            });
            
            alliances.forEach(function(alliance) {
                if (selectedStatus !== alliance.status && selectedStatus !== 'all') return;
                
                const sourceMarker = markers[alliance.source_id];
                const targetMarker = markers[alliance.target_id];
                
                if (sourceMarker && targetMarker) {
                    const sourceLatLng = sourceMarker.getLatLng();
                    const targetLatLng = targetMarker.getLatLng();
                    
                    let lineStyle;
                    switch(alliance.status) {
                        case 'accepted':
                            lineStyle = {
                                color: 'green',
                                weight: 3,
                                opacity: 0.7
                            };
                            break;
                        case 'pending':
                            lineStyle = {
                                color: 'orange',
                                weight: 2,
                                opacity: 0.7
                            };
                            break;
                        case 'rejected':
                            lineStyle = {
                                color: 'red',
                                weight: 2,
                                opacity: 0.5
                            };
                            break;
                    }
                    
                    const polyline = L.polyline([sourceLatLng, targetLatLng], lineStyle).addTo(map);
                    
                    polyline.bindTooltip('<%= t("organization_alliances.map.alliance_status") %>: ' + 
                                                         '<%= t("organization_alliances.status") %>.' + alliance.status);
                    
                    polylines.push(polyline);
                }
            });
            
            if (newBounds.isValid()) {
                map.fitBounds(newBounds.pad(0.1));
            }
        }
        
        drawMarkersAndLines();
        
        function filterByRadius(centerLat, centerLng, radius) {
            orgsWithCoordinates.length = 0;
            originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
            
            const filteredOrgs = orgsWithCoordinates.filter(org => {
                if (!org.latitude || !org.longitude) return false;
                
                const dist = calculateDistance(
                    centerLat, 
                    centerLng, 
                    parseFloat(org.latitude), 
                    parseFloat(org.longitude)
                );
                
                org.distance = dist;
                
                return dist <= radius;
            });
            
            if (filteredOrgs.length === 0) {
                alert('<%= t("maps.no_organizations_in_radius") %>');
                return false;
            }
            
            orgsWithCoordinates.length = 0;
            filteredOrgs.forEach(org => orgsWithCoordinates.push(org));
            
            drawMarkersAndLines();
            
            const centerIcon = createCenterMarker();
            const centerMarker = L.marker([centerLat, centerLng], {
                icon: centerIcon
            }).addTo(map);
            
            centerMarker.bindTooltip('<%= t("maps.filter.center_point") %>');
            
            return true;
        }
        
        document.getElementById('distance-slider').addEventListener('input', function() {
            const sliderValue = document.getElementById('slider-value');
            const value = parseInt(this.value);
            
            this.setAttribute('aria-valuenow', value);
            
            if (value === 500) {
                sliderValue.textContent = 'Sin límite';
                this.setAttribute('aria-valuetext', 'Sin límite');
                
                orgsWithCoordinates.length = 0;
                originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
                
                drawMarkersAndLines();
                
                if (bounds.isValid()) {
                    map.fitBounds(bounds.pad(0.1));
                }
            } else {
                const valueText = value + ' km';
                sliderValue.textContent = valueText;
                this.setAttribute('aria-valuetext', valueText);
                applyRadiusFilter(value);
            }
        });

        document.getElementById('distance-slider').addEventListener('keydown', function(e) {
            let newValue = parseInt(this.value);
            const step = 10; 
            
            if (e.key === 'ArrowRight' || e.key === 'ArrowUp') {
                newValue = Math.min(500, newValue + step);
                this.value = newValue;
                this.dispatchEvent(new Event('input'));
            } else if (e.key === 'ArrowLeft' || e.key === 'ArrowDown') {
                newValue = Math.max(1, newValue - step);
                this.value = newValue;
                this.dispatchEvent(new Event('input'));
            } else if (e.key === 'Home') {
                this.value = 1;
                this.dispatchEvent(new Event('input'));
            } else if (e.key === 'End') {
                this.value = 500;
                this.dispatchEvent(new Event('input'));
            }
        });

        document.getElementById('reset-radius').addEventListener('click', function() {
            const slider = document.getElementById('distance-slider');
            slider.value = 500;
            document.getElementById('slider-value').textContent = 'Sin límite';
            
            orgsWithCoordinates.length = 0;
            originalOrgsData.forEach(org => orgsWithCoordinates.push(org));
            
            drawMarkersAndLines();
            
            if (bounds.isValid()) {
                map.fitBounds(bounds.pad(0.1));
            }
        });
        
        function applyRadiusFilter(radius) {
            if (radius <= 0 || isNaN(radius)) {
                return;
            }
            
            const currentOrg = organizations.find(org => org.id === currentOrgId);
            
            if (!currentOrg || !currentOrg.latitude || !currentOrg.longitude) {
                return;
            }
            
            filterByRadius(
                parseFloat(currentOrg.latitude),
                parseFloat(currentOrg.longitude),
                radius
            );
        }
        
        const searchContainer = document.createElement('div');
        searchContainer.className = 'card mt-3';
        searchContainer.innerHTML = `
            <div class="card-body">
                <h5 class="card-title" id="find-organization-title"><%= t("organization_alliances.map.find_organization") %></h5>
                <div class="row g-3 align-items-end">
                    <div class="col-md-10">
                        <label for="organization-selector" class="form-label"><%= t("organization_alliances.map.select_organization") %></label>
                        <div class="input-group mb-0">
                            <select class="form-select" id="organization-selector" aria-describedby="find-organization-title">
                                <option value=""><%= t('organization_alliances.map.select_organization') %></option>
                                ${orgsWithCoordinates.map(org => `
                                    <option value="${org.id}">${org.name}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-secondary" id="locate-organization-btn" 
                            aria-label="<%= t("organization_alliances.map.locate_aria") %>">
                            <%= t("organization_alliances.map.locate") %>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.querySelector('.card-body').appendChild(searchContainer);
        
        document.getElementById('locate-organization-btn').addEventListener('click', function() {
            const selector = document.getElementById('organization-selector');
            const selectedId = parseInt(selector.value);
            if (selectedId && markers[selectedId]) {
                const marker = markers[selectedId];
                const selectedOrgName = selector.options[selector.selectedIndex].text;
                map.setView(marker.getLatLng(), 13);
                marker.openPopup();
                
                const announcement = document.createElement('div');
                announcement.setAttribute('aria-live', 'polite');
                announcement.className = 'visually-hidden';
                announcement.textContent = '<%= t("organization_alliances.map.located_organization") %>' + selectedOrgName;
                document.body.appendChild(announcement);
                
                setTimeout(() => {
                    document.body.removeChild(announcement);
                }, 3000);
            }
        });

        document.getElementById('alliance-map').addEventListener('keydown', function(e) {
            if (e.key === '+' || e.key === '=') {
                map.zoomIn();
            } else if (e.key === '-' || e.key === '_') {
                map.zoomOut();
            }
        });

        setTimeout(function() {
            map.invalidateSize();

            const accessibilityInstructions = document.createElement('div');
            accessibilityInstructions.id = 'map-instructions';
            accessibilityInstructions.className = 'visually-hidden';
            accessibilityInstructions.setAttribute('aria-hidden', 'false');
            accessibilityInstructions.textContent = '<%= t("organization_alliances.map.keyboard_instructions") %>';
            document.getElementById('alliance-map').appendChild(accessibilityInstructions);
        }, 100);
    });
</script>
